#!/usr/bin/env python3

import sys
import subprocess
import re
import threading
import queue
import yaml
import os
from typing import Dict, List, TextIO, TypedDict

# Check for the environment variable to enable debug mode
DEBUG = os.getenv('GZORP_DEBUG', 'false').lower() in ['1', 'true', 'yes']

def debug_print(msg: str) -> None:
    if DEBUG:
        print(f"[DEBUG] {msg}")

CONFIG_DIR = os.path.expanduser('~/.config/gzorp-west-helper')
PATTERN_DIR = os.path.join(CONFIG_DIR, 'patterns')

class ErrorPattern(TypedDict):
    message: str
    resolution: List[str]
    pattern: str

def load_error_patterns() -> Dict[str, ErrorPattern]:
    patterns = {}
    if not os.path.exists(PATTERN_DIR):
        os.makedirs(PATTERN_DIR)
        
    for filename in os.listdir(PATTERN_DIR):
        if filename.endswith('.yaml'):
            filepath = os.path.join(PATTERN_DIR, filename)
            try:
                with open(filepath, 'r') as f:
                    category_patterns = yaml.safe_load(f)
                    if category_patterns:
                        patterns.update(category_patterns)
                debug_print(f"Loaded {len(category_patterns)} patterns from {filepath}")
                debug_print(f"Loaded patterns: {list(category_patterns.keys())}")
            except (yaml.YAMLError, FileNotFoundError) as e:
                debug_print(f"Error loading {filepath}: {e}")
                
    return patterns

def save_error_patterns(patterns: Dict, category: str) -> None:
    filepath = os.path.join(PATTERN_DIR, f"{category}.yaml")
    try:
        with open(filepath, 'w') as f:
            yaml.dump(patterns, f, default_flow_style=False)
        debug_print(f"Saved patterns to {filepath}")
    except Exception as e:
        debug_print(f"Error saving to {filepath}: {e}")

ERROR_PATTERNS = load_error_patterns()

# Flag to track if any pattern was matched
pattern_matched = False

# Watch a stream for output and check for known error patterns
def stream_watcher(stream: TextIO, prefix: str, message_queue: queue.Queue) -> None:
    global pattern_matched
    try:
        for line in iter(stream.readline, ''):
            line = line.rstrip()
            
            if prefix == 'stderr':
                if DEBUG:
                    sys.stderr.write('\x1b[38;5;208mstderr:passthru:\x1b[0m' + line + '\n')
                else:
                    sys.stderr.write(line + '\n')
            
            # Check for matching patterns
            for pattern_name, pattern in ERROR_PATTERNS.items():
                if re.search(pattern['pattern'], line):
                    pattern_matched = True
                    message_queue.put((pattern_name, pattern))
                    break
    except Exception as e:
        debug_print(f"Error in stream_watcher: {e}")

def main():
    global pattern_matched
    message_queue = queue.Queue()

    # Run the west command
    process = subprocess.Popen(['west', 'build'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    # Start stream watchers for stdout and stderr
    stdout_thread = threading.Thread(target=stream_watcher, args=(process.stdout, 'stdout', message_queue))
    stderr_thread = threading.Thread(target=stream_watcher, args=(process.stderr, 'stderr', message_queue))
    stdout_thread.start()
    stderr_thread.start()

    # Wait for the process to complete
    process.wait()
    stdout_thread.join()
    stderr_thread.join()

    # Process messages from the queue
    while not message_queue.empty():
        pattern_name, pattern = message_queue.get()
        print(f"Matched pattern: {pattern_name}")
        print(f"Message: {pattern['message']}")
        print(f"Resolution: {pattern['resolution']}")

    # Print a message if no patterns were matched
    if not pattern_matched:
        print("\033[95mgzorp-west-helper: No matching pattern found for the current build error.\033[0m")

if __name__ == "__main__":
    main()