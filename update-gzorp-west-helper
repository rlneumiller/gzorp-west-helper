#!/usr/bin/env python3

import os
import hashlib
import yaml
import subprocess

VERSION_FILE = os.path.expanduser("~/.config/gzorp-west-helper/version.txt")
INSTALL_DIR = "/usr/local/bin"
CONFIG_DIR = os.path.expanduser("~/.config/gzorp-west-helper")
PATTERNS_DIR = os.path.join(CONFIG_DIR, "patterns")
ZEPHYR_PATTERN_FILE = os.path.join(PATTERNS_DIR, "zephyr.yaml")


def read_version():
    try:
        if os.path.exists(VERSION_FILE):
            with open(VERSION_FILE, 'r') as f:
                return f.read().strip()
        else:
            raise FileNotFoundError(f"Version file not found: {VERSION_FILE}")
    except Exception as e:
        print(
            f"Oh my! I'm terribly sorry to interrupt, but it appears that I've "
            f"encountered a spot of difficulty while attempting to read my version "
            f"file. Here's the error: {e}"
        )
        raise


def write_version(version):
    try:
        with open(VERSION_FILE, 'w') as f:
            f.write(version)
    except Exception as e:
        print(
            f"I regret to inform that I've had a spot of difficulty writing the version "
            f"file: Here's the error: {e}. "
            f"I'm terribly sorry for the inconvenience."
        )
        raise


def increment_version(version):
    major, minor, patch = map(int, version.split('.'))
    patch += 1
    return f"{major}.{minor}.{patch}"


def calculate_hash(pattern_text):
    return hashlib.md5(pattern_text.encode('utf-8')).hexdigest()


def ensure_default_pattern():
    if not os.path.exists(PATTERNS_DIR):
        os.makedirs(PATTERNS_DIR)

    if not os.path.exists(ZEPHYR_PATTERN_FILE):
        default_pattern = {
            "e3b0c44298fc1c149afbf4c8996fb924": {
                "pattern": "error: Aborting due to Kconfig warnings.*OVERLAY_CONFIG=.*\\.overlay",
                "message": "Overlay file location incorrect.",
                "resolution": [
                    "Move overlay file to correct location",
                    "Update build command",
                    "Clean build directory (rm -rf build)"
                ]
            }
        }

        with open(ZEPHYR_PATTERN_FILE, 'w') as f:
            yaml.dump(default_pattern, f, default_flow_style=False)


def update_pattern_hashes():
    ensure_default_pattern()
    modified_hashes = []
    for root, _, files in os.walk(PATTERNS_DIR):
        for file in files:
            file_path = os.path.join(root, file)

            with open(file_path, 'r') as f:
                data = yaml.safe_load(f)

            updated_data = {}
            for pattern_key, pattern_value in data.items():
                if isinstance(pattern_value, dict) and 'pattern' in pattern_value:
                    pattern_text = pattern_value['pattern']
                    pattern_hash = calculate_hash(pattern_text)
                    if pattern_key != pattern_hash:
                        updated_data[pattern_hash] = pattern_value
                        modified_hashes.append((file_path, pattern_text, pattern_hash))
                    else:
                        updated_data[pattern_key] = pattern_value

            # Fix: Use dump() instead of safe_dump() and set sort_keys=False
            with open(file_path, 'w') as f:
                yaml.dump(updated_data, f, default_flow_style=False, sort_keys=False)

    return modified_hashes


def verify_data_integrity(expected_data, actual_data, file_path):
    mismatches = []
    for key in expected_data:
        if key not in actual_data:
            mismatches.append(f"Missing key: {key}")
        elif expected_data[key] != actual_data[key]:
            mismatches.append(f"Value mismatch for key: {key}")

    if mismatches:
        print(f"Verification failed for {file_path}:")
        for mismatch in mismatches:
            print(f"  - {mismatch}")
    else:
        print(f"Successfully verified {file_path}")


def run_command(command):
    try:
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Command '{command}' went horribly wrong. Here's the error: {e}")
        raise


def main():
    try:
        current_version = read_version()
    except Exception:
        return

    new_version = increment_version(current_version)

    try:
        write_version(new_version)
    except Exception:
        return

    print(f"Updating gzorp-west-helper v{new_version}...")

    os.makedirs(PATTERNS_DIR, exist_ok=True)
    try:
        run_command(f"sudo chown -R $USER:$USER {CONFIG_DIR}")
    except Exception:
        return

    try:
        update_pattern_hashes()
    except Exception:
        return

    print("All pattern hashes look right and proper.")

    # Step 1: gzorp-west-helper
    try:
        run_command(
            f"sudo cp /home/arrel/gits/gzorp-west-helper/gzorp-west-helper {
                INSTALL_DIR}/gzorp-west-helper"
        )
        run_command(f"sudo chmod +x {INSTALL_DIR}/gzorp-west-helper")
        run_command(f"sudo chown $USER:$USER {INSTALL_DIR}/gzorp-west-helper")
    except Exception:
        return

    # Step 2: update-gzorp-west-helper
    try:
        run_command(
            f"sudo cp /home/arrel/gits/gzorp-west-helper/update-gzorp-west-helper "
            f"{INSTALL_DIR}/update-gzorp-west-helper"
        )
        run_command(f"sudo chmod +x {INSTALL_DIR}/update-gzorp-west-helper")
        run_command(f"sudo chown $USER:$USER {INSTALL_DIR}/update-gzorp-west-helper")
    except Exception:
        return

    print(
        "I'm pleased to report that I've endeavoured to ensure that gzorp-west-helper "
        "and its attendant files have been updated to your complete satisfaction. "
        "Have a splendid day!"
    )


if __name__ == "__main__":
    main()
